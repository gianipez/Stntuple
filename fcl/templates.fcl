# -*- mode: tcl -*-
#------------------------------------------------------------------------------
# defines templates, assume that standardProducers.fcl has been included 
# a 'templates' file should include everything needed
# package 'prolog' files shouldn't be including anything
#------------------------------------------------------------------------------
#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#------------------------------------------------------------------------------
# this one is needed - defines TrackQual
#------------------------------------------------------------------------------
#include "TrkDiag/fcl/prolog.fcl"
#------------------------------------------------------------------------------
# local prolog
#------------------------------------------------------------------------------
#include "Stntuple/fcl/prolog.fcl"

### BEGIN_PROLOG
#------------------------------------------------------------------------------
# declarations of sequences do not require the sequence elements to be defined
#------------------------------------------------------------------------------
  generatorSeq  : [ generate, g4run, detectorFilter, @sequence::CommonMC.DigiSim ]

# MC generator and hit makers


  allHelixSearchSeq  : [ TimeClusterFinder, HelixFinder, 
			 CalTimePeakFinder, CalHelixFinder, 
			 MergeHelixFinder ]

#  trkPatRecDemSeq  : [ @sequence::Tracking.TPRDeM , MergePatRecDem ]
#  trkPatRecDmmSeq  : [ @sequence::Tracking.TPRDmuM, MergePatRecDmm ]

#   calPatRecDemSeq  : [ @sequence::CalPatRec.dem_reco, MergePatRecDem ]

# event for the downstream particles, avikPID requires running both electron and muon track reconstruction 
# hit making - just once, but two modules

#  allPatRecDemSeq     : [ TimeClusterFinder, HelixFinder,  KSFDeM, KFFDeM, 
#			  DeltaFinder, CalPatRecDem, 
#			  MergePatRecDem ]

#  allPatRecDmmSeq     : [ TimeClusterFinder, HelixFinder,  KSFDmM, KFFDmM,
#			  DeltaFinder, CalPatRecDmm, 
#			  MergePatRecDmm ]
#------------------------------------------------------------------------------
# downstream electron and muon reconstructon together
#------------------------------------------------------------------------------
#  trkPatRecDemDmmSeq  : [ TimeClusterFinder, HelixFinder, KSFDeM, KFFDeM, KSFDmuM, KFFDmuM, 
#			  MergePatRecDem, MergePatRecDmm ]

#  calPatRecDemDmmSeq  : [ DeltaDinder, 
#			  CalPatRecDem, CalPatRecDmm, 
#			  MergePatRecDem, MergePatRecDmm ]

#  allPatRecDemDmmSeq  : [ TimeClusterFinder, HelixFinder, 
#			  KSFDeM, KFFDeM, KSFDmuM, KFFDmuM, 
#			  @sequence::CalPatRec.dem_reco, MergePatRecDem, 
#			  @sequence::CalPatRec.dmm_reco, MergePatRecDmm ]
#------------------------------------------------------------------------------
# particle identification
# AvikPID on input takes MergePatRecDem and MergePatRecDmm
#------------------------------------------------------------------------------
  vadimPidSeq   : [ @sequence::TrackCaloMatching.matching, ParticleID ]

  avikPidSeq    : [ @sequence::TrackCaloMatching.matching_dem, @sequence::TrackCaloMatching.matching_dmm, AvikPID ]

  pidSeq        : [ @sequence::avikPidSeq ]

  stnmaker_seq           : [ InitStntuple, StntupleMaker      , FillStntuple ]
  stnmaker_dem_seq       : [ InitStntuple, StntupleMakerDem   , FillStntuple ]
  stnmaker_dmm_seq       : [ InitStntuple, StntupleMakerDmm   , FillStntuple ]
  stnmaker_dem_dmm_seq   : [ InitStntuple, StntupleMakerDemDmm, FillStntuple ]

  stnmaker_trig_seq      : [ InitStntuple, StntupleMakerTcmTrig , FillStntuple ]
  stnmaker3_seq          : [ InitStntuple, StntupleMakerTcm     , FillStntuple ]
#------------------------------------------------------------------------------
# *** path sequences
#------------------------------------------------------------------------------
#   hits_calo_apr_stnmaker_seq : [ @sequence::CommonMC.DigiSim, @sequence::hitMakerSeq, 
# 				 @sequence::CaloCluster.Reco, 
#                                  @sequence::allPatRecSeq,
#                                  @sequence::TrackCaloMatching.matching,
# #				 AvikPID, 
# 				 @sequence::stnmaker_seq ]
# 
#  hits_calo_tprdem_stnmaker_seq : [ @sequence::CommonMC.DigiSim, @sequence::hitMakerSeq, 
#				    @sequence::CaloCluster.Reco,
#				    @sequence::trkPatRecDemSeq,
 #                                   @sequence::TrackCaloMatching.matching_dem,
#				    #				      AvikPID, 
#				    @sequence::stnmaker_dem_seq ]
#------------------------------------------------------------------------------
# run full reconstruction on the data coming from the input file
#------------------------------------------------------------------------------
#  path_calo_apr_vpid_stnm :       [ @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
#                                   @sequence::TrackCaloMatching.matching,
#				    ParticleID, 
#				    @sequence::stnmaker_seq ]
#------------------------------------------------------------------------------
# generate signal, run full reconstruction
#------------------------------------------------------------------------------
#   path_gen_hits_calo_apr_vpid_stnm : [ @sequence::generatorSeq, @sequence::hitMakerSeq ,
# 				       @sequence::CaloCluster.Reco , @sequence::allPatRecSeq,
#                                        @sequence::TrackCaloMatching.matching,
# 				       ParticleID, 
# 				       @sequence::stnmaker_seq ]
#------------------------------------------------------------------------------
# do track-to-calo matching for each branch separately
#------------------------------------------------------------------------------
#   path_gen_hits_calo_apr_vpid_stnm3 : [ @sequence::generatorSeq    , @sequence::hitMakerSeq ,
# 					@sequence::CaloCluster.Reco, 
# 					@sequence::allPatRecSeq, 
# 					MergePatRecTpr,
# 					MergePatRecCpr,
# 					@sequence::TrackCaloMatching.matching,
# 					@sequence::TrackCaloMatching.matching_tpr,
# 					@sequence::TrackCaloMatching.matching_cpr,
# 					ParticleID, 
# 					@sequence::stnmaker3_seq ]
# #------------------------------------------------------------------------------
# # read signal files and run full reconstruction
# #------------------------------------------------------------------------------
#   path_hits_calo_apr_vpid_stnm     : [ @sequence::CommonMC.DigiSim  , @sequence::hitMakerSeq ,
# 				       @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
#                                        @sequence::TrackCaloMatching.matching,
# 				       ParticleID, 
# 				       @sequence::stnmaker_seq ]
# 
#  path_calo_apr_vpid_stnm          : [ @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
#				       @sequence::TrackCaloMatching.matching,
#				       ParticleID, 
#				       @sequence::stnmaker_seq ]
#------------------------------------------------------------------------------
# read both signal and background files, mix, run full reconstruction
#------------------------------------------------------------------------------
#   path_mix_hits_calo_apr_vpid_stnm : [ @sequence::mix_seq     , @sequence::hitMakerSeq ,  # FIXME
# 				       @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
#                                       @sequence::TrackCaloMatching.matching,
# 				       ParticleID, 
# 				       @sequence::stnmaker_seq ]
# 
#   path_mix_hits_calo_apr_vpid_display : [ @sequence::mix_seq     , @sequence::hitMakerSeq ,
# 					  @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
#                                         @sequence::TrackCaloMatching.matching,
# 					  ParticleID, 
# 					  MuHitDisplay ]
# #------------------------------------------------------------------------------
# generate signal, read background files, mix, run full reconstruction
#------------------------------------------------------------------------------
#  path_gen_mix_hits                    : [ @sequence::gen_mix_seq , @sequence::hitMakerSeq ]  *FIXME

#   path_gen_mix_hits_calo_apr_vpid_stnm : [ @sequence::gen_mix_seq , @sequence::hitMakerSeq ,  # FIXME
# 					   @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
#                                          @sequence::TrackCaloMatching.matching,
# 					   ParticleID, 
# 					   @sequence::stnmaker_seq ]
# 
#   path_gen_mix_hits_calo_apr_vpid_display : [ @sequence::gen_mix_seq , @sequence::hitMakerSeq ,
# 					   @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
#                                          @sequence::TrackCaloMatching.matching,
# 					   ParticleID, 
# 					   MuHitDisplay]
### END_PROLOG
#------------------------------------------------------------------------------
# input module definition
#------------------------------------------------------------------------------
source : { 
    # module_type : EmptyEvent
    module_type : RootInput
    #    fileNames   : [ {INPUT_DATA_FILE} ]
    #    fileNames : ["/mu2e/data/tdr/beam/g4s4p5/tdr.beam.g4s4.conversion.1504a.15729672/good/00000/dsStopsToHitsConversion.root"]
    #    maxEvents   : 100
    inputCommands : ['keep *_*_*_*'
    #		     , 'drop *_muonTimeMap_*_*'
    #		     , 'drop *_protonTimeMap_*_*'
    #		     , 'drop mu2eStrawDigis_*_*_*'
    #		     , 'drop mu2eStrawHits_*_*_*'
    #		     , 'drop *_CaloReadoutHitsMaker_*_*'
    #		     , 'drop *_CaloCrystalHitsMaker_*_*'
    # Uncomment the above lines to reduce file size.
		    ]
}
#------------------------------------------------------------------------------
# services section
#------------------------------------------------------------------------------
services : { @table::Services.SimAndReco

    message               : @local::default_message
    TFileService          : { fileName        : "nts._USER_._DATASET_._DSCONF_.sequencer.root" }
    RandomNumberGenerator : { }

    GeometryService        : { @table::Services.SimAndReco.GeometryService 
	inputFile      : "Mu2eG4/geom/geom_common.txt"
    }

    ConditionsService      : { @table::Services.SimAndReco.ConditionsService
	conditionsfile : "Mu2eG4/test/conditions_01.txt"        
    }

    GlobalConstantsService : { @table::Services.SimAndReco.GlobalConstantsService
	inputFile      : "Mu2eG4/test/globalConstants_01.txt"   
    }

    SeedService            : { @table::automaticSeeds
	baseSeed         :  0
	maxUniqueEngines :  100
    }

    TimeTracker : {
	printSummary : true
	dbOutput : {
	    filename  : ""
	    overwrite : false
	}
    }
}
services.scheduler.wantSummary: true
#------------------------------------------------------------------------------
# reconstruction and analysis modules
#------------------------------------------------------------------------------
Stntuple : { @table::Stntuple             # defined in Stntuple/fcl/prolog.fcl
    mc_producers : {
	@table::EventGenerator.producers  # defined in EventGenerator
	@table::CommonMC.producers        # FIXME
	@table::Mu2eG4.producers          # defined in Mu2eG4/fcl
	@table::CaloDigiMC.producers      # defined in CaloDigiMC
	@table::CaloDigiMC.producersMC    # defined in CaloDigiMC
	@table::CaloCluster.producersMC   # defined in CaloCluster
	@table::TrackerMC.producers       # defined in TrackerMC

	compressDigiMCs : { @table::DigiCompression.Primary  # defined in Filters/fcl/
	    crvDigiMCTag         : ""
	    extraStepPointMCTags : [ "g4run:virtualdetector" ]
	}

	generate : { @table::EventGenerator.producers.egun }    # to avoid diagnostics
    }

    reco_producers : { @table::Stntuple.producers 
#------------------------------------------------------------------------------
# all Stntuple modules are filters, they are defined in Stntuple/fcl/prolog.fcl
# add modules defined in other packages
#------------------------------------------------------------------------------
#        generate             : { @table::StoppedMuonConversionGun }  FIXME
#	g4run                : { @table::Mu2eG4.producers.g4run   }
#------------------------------------------------------------------------------
# TrkPatRec and CalPatRec modules
#------------------------------------------------------------------------------
	@table::CaloReco.producers         # defined in CaloReco
	@table::CaloCluster.producers      # defined in CaloCluster
#	@table::CaloClusterTrigger.producers # defined in CaloCluster
	@table::CalPatRec.producers
	@table::ParticleID.producers
	@table::TrackCaloMatching.producers
	@table::Tracking.producers         # defined in TrkPatRec
	@table::TrkHitReco.producers       # defined in TrkHitReco

	@table::CommonTrk.producers
	TrkQualDeMHPar  : { @table::TrkQual KalSeedCollection: "KFFDeMHPar"  }
	TrkQualDeMHDar  : { @table::TrkQual KalSeedCollection: "KFFDeMHDar"  }
	TrkQualDmuMHPar : { @table::TrkQual KalSeedCollection: "KFFDmuMHPar" }
	TrkQualDmuMHDar : { @table::TrkQual KalSeedCollection: "KFFDmuMHDar" }

	@table::CrvDAQPackage.producers    # defined in CRVResponse
	@table::CrvRecoMCPackage.producers # defined in CRVResponse
	CrvCoincidenceClusterMatchMC: { @table::CrvCoincidenceClusterMatchMC timeOffsets: { inputs: @local::CommonMC.TimeMaps } } 
    }

    filters : { @table::Stntuple.filters
#------------------------------------------------------------------------------
# event mixing modules - all clones of the same module.
# each clone takes certain collections from the input file and adds them to the event
#------------------------------------------------------------------------------
# FIXME#	@table::EventMixing.filters
# FIXME        flashMixer           : { @table::mixerTemplate
# FIXME#	    fileNames : @local::bgHitFiles 
# FIXME	    detail: { @table::mixerTemplate.detail g4ModuleLabel:flashMixer genModuleLabel:flashMixer }
# FIXME	}
# FIXME	ootMixer             : { @table::mixerTemplate
# FIXME#	    fileNames : @local::bgHitFiles 
# FIXME	    detail: { @table::mixerTemplate.detail g4ModuleLabel:ootMixer   genModuleLabel:ootMixer   }
# FIXME	}
# FIXME	dioMixer             : { @table::mixerTemplate
# FIXME#	    fileNames : @local::bgHitFiles 
# FIXME	    detail: { @table::mixerTemplate.detail g4ModuleLabel:dioMixer   genModuleLabel:dioMixer   }
# FIXME	}
# FIXME	neutronMixer         : { @table::mixerTemplate
# FIXME#	    fileNames : @local::bgHitFiles 
# FIXME	    detail: { @table::mixerTemplate.detail g4ModuleLabel:neutronMixer genModuleLabel:neutronMixer }
# FIXME	}
# FIXME	photonMixer          : { @table::mixerTemplate
# FIXME#	    fileNames : @local::bgHitFiles 
# FIXME	    detail: { @table::mixerTemplate.detail g4ModuleLabel:photonMixer genModuleLabel:photonMixer }
# FIXME	}
# FIXME	protonMixer          : { @table::mixerTemplate
# FIXME#	    fileNames : @local::bgHitFiles 
# FIXME	    detail: { @table::mixerTemplate.detail g4ModuleLabel:protonMixer genModuleLabel:protonMixer }
# FIXME	}
# FIXME	deuteronMixer          : { @table::mixerTemplate
# FIXME#	    fileNames : @local::bgHitFiles 
# FIXME	    detail: { @table::mixerTemplate.detail g4ModuleLabel:deuteronMixer genModuleLabel:deuteronMixer }
# FIXME	}
#------------------------------------------------------------------------------
# Andrej's filter: Filters/src/FilterStepPointMomentum_module.cc
# Reject events with no hits from signal-like tracks in the detectors.  
# The filter does not look at the background hits from mixed events.
#------------------------------------------------------------------------------
	detectorFilter : { @table::FilterStepPointMomentum }

	@table::CalPatRec.filters
    }

    analyzers : {
	genCountLogger      : { module_type: GenEventCountReader } # defalt: 1 StepPointMC, 10 MeV
    }

    outputs: {
	detectorOutput : {
	    module_type   : RootOutput
	    SelectEvents  : [] 
	    outputCommands: [ "keep *_*_*_*"]
	}
    }
}
#------------------------------------------------------------------------------
# to run MDC2018 mixing and stntupling in the same job,  need to split
#------------------------------------------------------------------------------
Stntuple.producers : { 
    @table::Stntuple.mc_producers
    @table::Stntuple.reco_producers
}

#------------------------------------------------------------------------------
# sequences: can't define recursively within one namespace
#------------------------------------------------------------------------------
Stntuple.gen_g4              : [ generate, g4run, detectorFilter]
Stntuple.gen_g4_time_map     : [ @sequence::Stntuple.gen_g4, @sequence::CommonMC.DigiSim ]
Stntuple.mix                 : [ dioMixer, protonMixer, neutronMixer, photonMixer, ootMixer, flashMixer ]
Stntuple.mix_time_map        : [ @sequence::Stntuple.mix, @sequence::CommonMC.DigiSim ]
Stntuple.gen_g4_mix_time_map : [ @sequence::Stntuple.gen_g4, @sequence::Stntuple.mix, @sequence::CommonMC.DigiSim ]
Stntuple.digis               : [ @sequence::CaloDigiMC.DigiSim, @sequence::TrackerMC.DigiSim, @sequence::CrvDAQPackage.CrvDAQSequence, compressDigiMCs ]
#------------------------------------------------------------------------------
# proton reconstruction
#------------------------------------------------------------------------------
kludge_Tracking_TPRDpP       : [ TimeClusterFinder, HelixFinder, KSFDpP, KFFDpP ]

Stntuple.trk_hit_reco        : [ makeSH, makePH, FlagBkgHits]

Stntuple.cal_reco            : [ CaloRecoDigiFromDigi ,CaloCrystalHitFromHit, 
				 CaloProtoClusterFromCrystalHit, CaloClusterFromProtoCluster ]

# Stntuple.cpr_reco            : [ @sequence::CalPatRec.reco, 
#				 MergePatRecCpr,
#				 @sequence::TrackCaloMatching.matching_cpr ]

Stntuple.crv_reco            : [ @sequence::CrvRecoMCPackage.CrvRecoMCSequence ]

Stntuple.tpr_reco            : [ @sequence::Tracking.TPRDeM , 
				 MergePatRecTpr, 
				 @sequence::TrackCaloMatching.matching_tpr ]

# Stntuple.mpr_reco        : [ @sequence::Tracking.TPRDeM , 
# 			     @sequence::CalPatRec.reco, 
# 			     MergePatRec, 
#			     @sequence::TrackCaloMatching.matching ]

# Stntuple.cpr_reco_dem    : [ @sequence::CalPatRec.dem_reco, 
# 			     MergePatRecCprDem, 
# 			     @sequence::TrackCaloMatching.matching_cpr_dem ]

# Stntuple.tpr_reco_dem    : [ @sequence::Tracking.TPRDeM , 
# 			     MergePatRecTprDem, 
# 			     @sequence::TrackCaloMatching.matching_tpr_dem ]

# Stntuple.mpr_reco_dem    : [ @sequence::Tracking.TPRDeM , 
# 			     @sequence::CalPatRec.dem_reco, 
# 			     MergePatRecDem, 
# 			     @sequence::TrackCaloMatching.matching_dem,
# 			     AvikPIDNewDem
# 			    ]

# Stntuple.cpr_reco_dep    : [ @sequence::CalPatRec.dep_reco, 
# 			     MergePatRecCprDep, 
# 			     @sequence::TrackCaloMatching.matching_cpr_dep
# 			    ]

# Stntuple.tpr_reco_dep    : [ @sequence::Tracking.TPRDeP , 
#  			     MergePatRecTprDep, 
#  			     @sequence::TrackCaloMatching.matching_tpr_dep ]

# Stntuple.mpr_reco_dep    : [ @sequence::Tracking.TPRDeP , 
# 			     @sequence::CalPatRec.dep_reco, 
# 			     MergePatRecDep, 
# 			     @sequence::TrackCaloMatching.matching_dep,
# 			     AvikPIDNewDep
#			    ]

# Stntuple.dem_reco        : [ @sequence::Tracking.TPRDeM  , @sequence::CalPatRec.dem_reco, MergePatRecDem, 
# 			     @sequence::TrackCaloMatching.matching_dem, AvikPIDNewDem ]

# Stntuple.dpp_reco        : [ @sequence::kludge_Tracking_TPRDpP, MergePatRecDpp,
# 			     @sequence::TrackCaloMatching.matching_dpp   ]

# Stntuple.dmm_reco        : [ @sequence::Tracking.TPRDmuM, @sequence::CalPatRec.dmm_reco, MergePatRecDmm, 
# 			     @sequence::TrackCaloMatching.matching_dmm, AvikPIDNewDmm ]

# Stntuple.dep_reco        : [ @sequence::Tracking.TPRDeP  , @sequence::CalPatRec.dep_reco, MergePatRecDep, 
# 			     @sequence::TrackCaloMatching.matching_dep, AvikPIDNewDep ]

# Stntuple.dmp_reco        : [ @sequence::Tracking.TPRDmuP , @sequence::CalPatRec.dmp_reco, MergePatRecDmp, 
# 			     @sequence::TrackCaloMatching.matching_dmp, AvikPIDNewDmp ]
#------------------------------------------------------------------------------
# new tracking sequences: 2 lists in the end, 'MH' is the new default (MergeHelix)
#------------------------------------------------------------------------------
Stntuple.reco_De       : [ @sequence::CommonTrk.reco_DeMH                  ,
			   @sequence::TrackCaloMatching.matching_DeMHPar   ,
			   AvikPIDNewDeMHPar                               ,
			   TrkQualDeMHPar                                  ,
			   @sequence::TrackCaloMatching.matching_DeMHDar   ,
			   AvikPIDNewDeMHDar                               ,
			   TrkQualDeMHDar
			  ]
#------------------------------------------------------------------------------
# muon reconstruction path
# new tracking sequences: 2 lists in the end, 'MH' is the new default (MergeHelix)
#------------------------------------------------------------------------------
Stntuple.reco_Dmu      : [ @sequence::CommonTrk.reco_DmuMH                 ,
			   @sequence::TrackCaloMatching.matching_DmuMHPar  ,
			   AvikPIDNewDmuMHPar                              ,
			   TrkQualDmuMHPar                                 ,
			   @sequence::TrackCaloMatching.matching_DmuMHDar  ,
			   AvikPIDNewDmuMHDar                              ,
			   TrkQualDmuMHDar
			  ]
#----------------------------------------------------------------------------------------------------
# CalPatRec is not used for upstream reconstruction
#----------------------------------------------------------------------------------------------------
Stntuple.uem_reco : [ @sequence::Tracking.TPRUeM , MergePatRecUem, @sequence::TrackCaloMatching.matching_uem, AvikPIDNewUem ]
Stntuple.umm_reco : [ @sequence::Tracking.TPRUeM , MergePatRecUmm, @sequence::TrackCaloMatching.matching_umm, AvikPIDNewUmm ]
Stntuple.uep_reco : [ @sequence::Tracking.TPRUeP , MergePatRecUep, @sequence::TrackCaloMatching.matching_uep, AvikPIDNewUep ]
Stntuple.ump_reco : [ @sequence::Tracking.TPRUmuP, MergePatRecUmp, @sequence::TrackCaloMatching.matching_ump, AvikPIDNewUmp ]

Stntuple.paths : {

    gcl                        : [ genCountLogger ]

#    path_gen_digi_reco_stn_dem : [ @sequence::Stntuple.gen_g4_time_map,
#				   @sequence::Stntuple.digis          ,
#				   @sequence::Stntuple.trk_hit_reco       ,
#				   @sequence::Stntuple.cal_reco       ,
#				   @sequence::Stntuple.dem_reco       ,
#				   @sequence::Stntuple.stnmaker_dem
#				  ]
    
#    path_gen_digi_reco_stn_dep : [ @sequence::Stntuple.gen_g4_time_map,
#				   @sequence::Stntuple.digis          ,
#				   @sequence::Stntuple.trk_hit_reco   ,
#				   @sequence::Stntuple.cal_reco       ,
#				   @sequence::Stntuple.dep_reco       ,
#				   @sequence::Stntuple.stnmaker_dep
#				  ]
    
#    path_gen_digi_reco_stn_dmm : [ @sequence::Stntuple.gen_g4_time_map,
#				   @sequence::Stntuple.digis          ,
#				   @sequence::Stntuple.trk_hit_reco       ,
#				   @sequence::Stntuple.cal_reco       ,
#				   @sequence::Stntuple.dmm_reco       ,
#				   @sequence::Stntuple.stnmaker_dmm
#				  ]

    path_gen_digi_reco_stn_uep : [ @sequence::Stntuple.gen_g4_time_map,
				   @sequence::Stntuple.digis          ,
				   @sequence::Stntuple.trk_hit_reco       ,				   
				   @sequence::Stntuple.cal_reco       ,
				   @sequence::Stntuple.uep_reco       ,
				   @sequence::Stntuple.stnmaker
				  ]

    path_gen_digi_reco_stn_ump : [ @sequence::Stntuple.gen_g4_time_map,
				   @sequence::Stntuple.digis          ,
				   @sequence::Stntuple.trk_hit_reco       ,
				   @sequence::Stntuple.cal_reco       ,
				   @sequence::Stntuple.ump_reco       ,
				   @sequence::Stntuple.stnmaker
				  ]

#    path_gen_digi_reco_stn_dem_dmm : [ @sequence::Stntuple.gen_g4_time_map,
#				       @sequence::Stntuple.digis          ,
#				       @sequence::Stntuple.trk_hit_reco       ,
#				       @sequence::Stntuple.cal_reco       ,
#				       @sequence::Stntuple.dem_reco       ,
#				       @sequence::Stntuple.dmm_reco       ,
#				       @sequence::Stntuple.stnmaker_dem_dmm
#				      ]

#     path_gen_digi_reco_stn_dem_umm : [ @sequence::Stntuple.gen_g4_time_map,
# 				       @sequence::Stntuple.digis          ,
# 				       @sequence::Stntuple.trk_hit_reco       ,
# 				       @sequence::Stntuple.cal_reco       ,
# 				       @sequence::Stntuple.dem_reco       ,
# 				       @sequence::Stntuple.umm_reco       ,
# 				       @sequence::Stntuple.stnmaker_dem_umm
# 				      ]
#     
#     path_gen_digi_reco_stn_dem_ump : [ @sequence::Stntuple.gen_g4_time_map,
# 				       @sequence::Stntuple.digis          ,
# 				       @sequence::Stntuple.trk_hit_reco       ,				       
# 				       @sequence::Stntuple.cal_reco       ,
# 				       @sequence::Stntuple.dem_reco       ,
# 				       @sequence::Stntuple.ump_reco       ,
# 				       @sequence::Stntuple.stnmaker_dem_ump
# 				      ]

#     path_gen_digi_reco_stn_tcm : [ @sequence::Stntuple.gen_g4_time_map,
# 				   @sequence::Stntuple.digis          ,
# 				   @sequence::Stntuple.trk_hit_reco       ,
# 				   @sequence::Stntuple.cal_reco       ,
# 				   @sequence::Stntuple.tpr_reco       ,
# 				   @sequence::Stntuple.cpr_reco       ,
# 				   @sequence::Stntuple.mpr_reco       ,
# 				   @sequence::Stntuple.stnmaker_tcm
# 				  ]
#     
#     path_gen_digi_reco_stn_tcm_dem : [ @sequence::Stntuple.gen_g4_time_map ,
# 				       @sequence::Stntuple.digis           ,
# 				       @sequence::Stntuple.trk_hit_reco    ,
# 				       @sequence::Stntuple.cal_reco        ,
# 				       @sequence::Stntuple.tpr_reco_dem    ,
# 				       @sequence::Stntuple.cpr_reco_dem    ,
# 				       @sequence::Stntuple.mpr_reco_dem    ,
# 				       @sequence::Stntuple.stnmaker_tcm_dem
# 				      ]

#     path_gen_digi_reco_stn_tcm_dep : [ @sequence::Stntuple.gen_g4_time_map ,
# 				       @sequence::Stntuple.digis           ,
# 				       @sequence::Stntuple.trk_hit_reco    ,
# 				       @sequence::Stntuple.cal_reco        ,
# 				       @sequence::Stntuple.tpr_reco_dep    ,
# 				       @sequence::Stntuple.cpr_reco_dep    ,
# 				       @sequence::Stntuple.mpr_reco_dep    ,
# 				       @sequence::Stntuple.stnmaker_tcm_dep
# 				      ]
#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
# FIXME    path_mix_digi_calo_apr_stn : [ @sequence::Stntuple.mix_time_map   , 
# FIXME				   @sequence::Stntuple.digis          ,
# FIXME				   @sequence::Stntuple.trk_hit_reco       ,
# FIXME				   @sequence::Stntuple.cal_reco       , 
# FIXME				   @sequence::Stntuple.tpr_reco       ,
# FIXME				   @sequence::Stntuple.cpr_reco       ,
# FIXME				   @sequence::Stntuple.mpr_reco       ,
# FIXME				   @sequence::Stntuple.stnmaker_tcm
# FIXME				  ]
}


physics : {
    producers: { 
	@table::Stntuple.producers 
    }

    filters  : { @table::Stntuple.filters   }
#------------------------------------------------------------------------------
# paths
# ------
# MakeStereoHits also produces the StrawHitPosition collection
#	   , dioMixer, protonMixer, neutronMixer, photonMixer, ootMixer, flashMixer
#------------------------------------------------------------------------------
    event_filter   : [ EventFilter             ]
#    gen_hits       : [ @sequence::gen_hits_seq ]
#    mc             : [ @sequence::gen_hits_seq , @sequence::CaloCluster.Reco ]
#
#    allpatrec_reco              : [ @sequence::CaloCluster.Reco, @sequence::allPatRecSeq ]
#    trkpatrec_reco              : [ @sequence::CaloCluster.Reco, @sequence::trkPatRecSeq ]
#    calpatrec_reco              : [ @sequence::CaloCluster.Reco, @sequence::calPatRecSeq ]
#
#    allpatrec_reco_stnmaker     : [ @sequence::CaloCluster.Reco, @sequence::allPatRecSeq, @sequence::pidSeq, @sequence::stnmaker_seq ]
#    trkpatrec_reco_stnmaker     : [ @sequence::CaloCluster.Reco, @sequence::trkPatRecSeq, @sequence::pidSeq, @sequence::stnmaker_seq ]
#    calpatrec_reco_stnmaker     : [ @sequence::CaloCluster.Reco, @sequence::calPatRecSeq, @sequence::pidSeq, @sequence::stnmaker_seq ]
#------------------------------------------------------------------------------
# only electron reconstruction turned on
#------------------------------------------------------------------------------
#    gen_trkpatrec_reco_stnmaker : [ @sequence::gen_hits_seq ,
#				    @sequence::CaloCluster.Reco  , @sequence::trkPatRecSeq,
#				    @sequence::vadimPidSeq , @sequence::stnmaker_seq  ]

#    gen_calpatrec_reco_stnmaker : [ @sequence::generatorSeq, @sequence::hitMakerSeq ,
#				    @sequence::CaloCluster.Reco  , @sequence::calPatRecSeq, 
#				    @sequence::vadimPidSeq , @sequence::stnmaker_seq  ]

#    gen_allpatrec_reco_stnmaker    : [ @sequence::generatorSeq, @sequence::hitMakerSeq ,
#				       @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
#				       @sequence::vadimPidSeq , @sequence::stnmaker_seq ]

#    gen_allpatrec_digi_stnmaker    : [ @sequence::generatorSeq, @sequence::digiMakerSeq ,
#				       @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq, @sequence::vadimPidSeq, 
#				       @sequence::stnmaker_seq  ]
#------------------------------------------------------------------------------
# same with mixed background 
#------------------------------------------------------------------------------
#     genmix_allpatrec_reco_stnmaker : [ @sequence::gen_mix_seq   , @sequence::hitMakerSeq ,
# 				       @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq,
# 				       @sequence::vadimPidSeq , @sequence::stnmaker_seq ]
#------------------------------------------------------------------------------
# AvikPID requires both electron and muon reconstruction sequences
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# event display paths
#------------------------------------------------------------------------------
#    allpatrec_reco_display      : [ @sequence::CaloCluster.Reco, @sequence::allPatRecSeq, @sequence::vadimPidSeq, MuHitDisplay ]
#   calpatrec_reco_display      : [ @sequence::CaloCluster.Reco, @sequence::calPatRecSeq, @sequence::vadimPidSeq, MuHitDisplay ]
#    trkpatrec_reco_display      : [ @sequence::CaloCluster.Reco, @sequence::trkPatRecSeq, @sequence::vadimPidSeq, MuHitDisplay ]

#    dem_reco_display            : [ @sequence::CaloCluster.Reco, 
#				    @sequence::allPatRecSeq,
#				    @sequence::vadimPidSeq, 
#				    MuHitDisplay ]

#    hit_reco_display_dem        : [ @sequence::CommonMC.DigiSim, 
#				    @sequence::hitMakerSeq,
#				    @sequence::CaloCluster.Reco, 
#				    @sequence::allPatRecSeq,
#				    @sequence::vadimPidSeq, 
#				    MuHitDisplay ]

#    digi_reco_display_dem       : [ @sequence::digiMakerSeq ,
#				    @sequence::CaloCluster.Reco, 
#				    @sequence::allPatRecSeq,
#				    @sequence::vadimPidSeq, 
#				    MuHitDisplay ]
#
#    gen_allpatrec_reco_display  : [ @sequence::generatorSeq, @sequence::hitMakerSeq ,
#				    @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq, @sequence::vadimPidSeq, 
#				    MuHitDisplay ]

#    gen_allpatrec_digi_display  : [ @sequence::generatorSeq, @sequence::digiMakerSeq ,
#				    @sequence::CaloCluster.Reco  , @sequence::allPatRecSeq, @sequence::vadimPidSeq, 
#				    @sequence::stnmaker_seq , MuHitDisplay ]

#    gen_calpatrec_reco_display  : [ @sequence::generatorSeq, @sequence::hitMakerSeq,
#				    @sequence::CaloCluster.Reco, @sequence::calPatRecSeq, @sequence::vadimPidSeq, MuHitDisplay ]

#    gen_trkpatrec_reco_display  : [ @sequence::generatorSeq, @sequence::hitMakerSeq,
#				    @sequence::CaloCluster.Reco, @sequence::trkPatRecSeq, @sequence::vadimPidSeq, MuHitDisplay ]

#    gen_allpatrec_dem_dmm_reco_display : [ @sequence::generatorSeq, @sequence::hitMakerSeq,
#					   @sequence::CaloCluster.Reco, @sequence::allPatRecDemDmmSeq,
#					   @sequence::avikPidSeq, MuHitDisplay ]

#------------------------------------------------------------------------------
    trigger_paths  : [   ]
    out            : [   ]
    end_paths      : [out]
}

outputs: {
    detectorOutput : {
        module_type : RootOutput
        SelectEvents: [] 
        outputCommands:   [ "keep *_*_*_*",
                            "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_g4run_*_*"
			   ]
#        fileName      : "generate_mix_mergePatRec_stnmaker.root"
    }
}
#------------------------------------------------------------------------------
# redefinitions
#------------------------------------------------------------------------------
